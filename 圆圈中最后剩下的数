/*题目描述：
      让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,
      然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0...m-1报数....这样下去....直到剩下最后一个小朋友
      返回最后一个小朋友的下标
  思路1：使用数组模拟环，时间复杂度O(n*m)，空间复杂度为O(n)
        1、新建一个大小为n的数组，设置几个变量。其中i：走过的每个元素的下标，初始化为-1；step：实际走过的元素个数（不包含已删除元素），初始化为0；
            count：环中剩余元素的个数，初始化为n
        2、i >= n时，i重新赋值为0；step == m时，该元素删除（赋值为-1，count--，step重新赋值为0）
  思路2：找规律
        f（n，m）表示有n个数时，指定m，最后剩下的数。
        第一个被删除的元素为（m-1）% n，我们记为k，剩余n-1个数，k+1、k+2、...n-1、0、1..k-1。
        
        做个映射：
            k+1 -> 0
            k+2 -> 1
            ...
            k-1 -> n-2
        映射后的数做该操作，最后剩下的数为f（n-1，m），将其映射回去，则映射之前的数为(f(n-1,m)+k+1)%n。
        将k带进去得(f(n-1,m)+m)%n。
        f[1]=0;
        f[n]=(f(n-1,m)+m)%i;  (n>1)
        
      
*/

//思路1
public class Solution {
    public int LastRemaining_Solution(int n, int m) {
        if (n <= 0 || m <= 0) return -1;
        int[] childs = new int[n];
        int count = n, i = -1, step = 0;
        while (count > 0) {
            i++;
            if (i >= n) i = 0;
            if (childs[i] == -1) continue;//表明该元素已被删除，访问下一个元素
            step++;
            if (step == m) {
                childs[i] = -1;
                step = 0;
                count--;
            }
        }
        return i;
    }
}
//思路2:
public class Solution {
    public int LastRemaining_Solution(int n, int m) {
        if (n <= 0 || m <= 0) return -1;
        int last = 0;
        for (int i = 2; i <= n; i++) {
            last = (last + m) % i;
        }
        return last;
    }
}

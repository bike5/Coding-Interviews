#数字在有序数组中出现次数
/*统计一个数字在排序数组中出现的次数。
思路：有序数组，考虑二分查找，时间复杂度O(lgn);
      做两次二分查找，第一次找到该数字首次出现的位置索引，第二次找到该数字最后出现的位置索引
      首次出现：
        若找到中间值等于目标值，判断中间值前一个元素是否和目标值相同，若是，则查找范围的右边界向前移动，否则返回该索引
      最后出现：
        若找到中间值等于目标值，判断中间值前一个元素是否和目标值相同，若是，则查找范围的左边界向后移动，否则返回该所索引
*/

public class Solution {
    public int GetNumberOfK(int [] array , int k) {
       	if (array == null || array.length == 0) return 0;
        int firstIndex = getIndexOfKfirstAppear(array, 0, array.length - 1, k);
        int lastIndex = getIndexOfKLastAppear(array, 0, array.length - 1, k);
        
        return (firstIndex != -1 && lastIndex != -1) ? lastIndex - firstIndex + 1 : 0;
    }
    public int getIndexOfKfirstAppear(int[] array, int start, int end, int k) {
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (array[mid] > k) {
                end = mid - 1;
            } else if (array[mid] < k) {
                start = mid + 1;
            } else if (mid >= 1 && array[mid - 1] == k) {
                end = mid - 1;
            } else return mid;
        }
        return -1;
    }
    
    public int getIndexOfKLastAppear(int[] array, int start, int end, int k) {
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (array[mid] > k) {
                end = mid - 1;
            } else if (array[mid] < k) {
                start = mid + 1;
            } else if (mid < array.length - 1 && array[mid + 1] == k) {
                start = mid + 1;
            } else return mid;
        }
        return -1;
    }
    
}

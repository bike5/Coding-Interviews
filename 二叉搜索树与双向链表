/*题目描述:
      输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。
      要求不能创建任何新的结点，只能调整树中结点指针的指向。
  思路：
      当前节点的左指针为双向链表的前向指针，右指针为双向链表的后向指针。
      定义一个节点，为当前节点右子树转为双向链表的头节点，当前节点的右节点指向该节点，若该节点不为null，其左节点指向当前节点，最后将当前节点赋值为头节点
      左、右子树使用递归做同样的转化
      
*/

/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
//递归
public class Solution {
    
    public TreeNode Convert(TreeNode pRootOfTree) {
        if (pRootOfTree == null) return null;
        TreeNode firstNode = null;
        return ConvertHelper(pRootOfTree, firstNode);
    }
    public TreeNode ConvertHelper(TreeNode pRootOfTree, TreeNode firstNode) {
        if (pRootOfTree.right != null) 
        
        firstNode = ConvertHelper(pRootOfTree.right, firstNode);
        
        if (firstNode == null) {
            firstNode = pRootOfTree;
        }else {
            firstNode.left = pRootOfTree;
            pRootOfTree.right = firstNode;
            firstNode = pRootOfTree;
        }
        if (pRootOfTree.left != null) 
        firstNode = ConvertHelper(pRootOfTree.left, firstNode);
        return firstNode;
    }
    
}
